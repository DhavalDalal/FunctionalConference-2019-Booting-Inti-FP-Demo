* Why Functional Programming Matters? - John Hughes

Functions Everywhere:
* Domain, Co-Domain and Range of a function.
* Type of a Function
* A Pure Function
* A Side-effecting Function
  * Black-Hole
  * Mother's Love
  * Politician    
* Are Side-effects bad? Is it a Side-effect or Useful effect?
  * Controlled Effects - Towards a Programming Language Nirvana - Simon Peyton Jones
  * Comprehending Monads - Is there a way to combine the indulgences of impurity with the 
  blessings of purity? - Phil Wadler
* Understanding Referential Transparency
  * To satisfy RT, a function must be
    * Pure
    * Deterministic
    * Work with Immutable Data
  * RT functions are context-free!
* 3 Pillars of FP - Debashish Ghosh
  * Ref. Trans. ==Enables==> Substitution Model ==Enables==> Equational Reasoning.

Lambda - λ:
* Anonymous Function
  * Reduction of Single Abstract Method (SAMs) Interfaces
    * A Regular function (Function, BiFunction)
    * Black-Hole (Consumer)
    * Mother's Love (Supplier, Callable)
    * Spock (Predicate)
    * Politician (Runnable)
* Every"thing" is a λ - Build abstractions from Higher-Order Functions (HoFs)
  * Pass Function to a Function
  * Return a Function from a Function
  * Pass and Return a Function to and from a Function
* Composing Functions
  * "Composition is THE way to tackle complexity" - Brian Beckman
  * compose
  * andThen  
* Evaluation
  * Eager or Strict
  * Lazy
    * Haskell is lazy by default, but provides a "strict" switch
    * Scala is eager by default, but provides a "lazy" switch
    * In Java, we simulate it by wrapping in a Lambda

Collections:
* Imperative Collecting and Filtering
* Streams (Lazy List) - Making parallelism more accessible to developers!
  * Infinitely Lazy
  * Parallel Streams
* Encourages idioms that are both sequential- and parallel-friendly.  

De-structuring and Pattern Matching:
* De-structuring
  * Extracting data from the innards of the Data-Structure.
  * Short-hand way of naming parts of the Data-Structure
* Pattern Matching  
  * Associate a definition with a particular set of inputs.
  * While matching on relative positions and values of elements in the data-structure dispatch to different definitions.

Currying or Partial Function Application (PFA):
* Its about re-shaping functions.
* Uses
  * Typically in third-party libraries where we may never be able to modify the code.
  * Inject arguments from different contexts.

Sequencing Operations using Monads:
* Making Absence Explicit - Optional<T>

Overview of upcoming Sessions:    
